# -*- coding: utf-8 -*-
"""SmartSDLC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L04B-2lIL_hpkr3op57Hazth2EZZXW9j
"""

!pip install transformers torch gradio PyPDF2 -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2

# -------------------
# Load Model & Tokenizer
# -------------------
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# -------------------
# Core Functions
# -------------------
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

# -------------------
# PDF Processing
# -------------------
def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""
    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        return f"Error reading PDF: {str(e)}"

# -------------------
# Requirement Analysis
# -------------------
def requirement_analysis(pdf_file, prompt_text):
    if pdf_file is not None:
        content = extract_text_from_pdf(pdf_file)
        analysis_prompt = f"Analyze the following document and extract key software requirements. Organize them into functional requirements, non-functional requirements, and technical specifications:\n\n{content}"
    else:
        analysis_prompt = f"Analyze the following requirements and organize them into functional requirements, non-functional requirements, and technical specifications:\n\n{prompt_text}"
    return generate_response(analysis_prompt, max_length=1200)

# -------------------
# Code Generation
# -------------------
def code_generation(prompt, language, framework="None", style="OOP"):
    code_prompt = f"Generate {language} code using {framework} in {style} style for the following requirement:\n\n{prompt}\n\nCode:"
    return generate_response(code_prompt, max_length=1200)

def generate_tests(code, language):
    test_prompt = f"Generate unit tests for the following {language} code:\n\n{code}\n\nTests:"
    return generate_response(test_prompt, max_length=800)

# -------------------
# Gradio App
# -------------------
with gr.Blocks() as app:

    # --- Custom CSS for thick borders and card style ---
    gr.HTML("""
    <style>
    /* Thick bordered boxes for text/code outputs */
    .thick-box {
        border: 3px solid #4B0082; /* Dark purple */
        border-radius: 12px;
        padding: 12px;
        box-shadow: 3px 3px 8px rgba(0,0,0,0.1);
        background-color: #F9F9FF;
    }
    /* Card style for sections */
    .card {
        border-radius: 15px;
        border: 2px solid #ddd;
        padding: 15px;
        margin-bottom: 20px;
        box-shadow: 3px 3px 10px rgba(0,0,0,0.08);
        background-color: #fff;
    }
    /* Styled header */
    #title {
        text-align:center;
        color:#4B0082;
        font-family: 'Arial', sans-serif;
    }
    #subtitle {
        text-align:center;
        color:#555;
        font-size: 16px;
        margin-bottom:20px;
    }
    </style>
    """)

    gr.Markdown("<h1 id='title'>ðŸ›  AI Code & Requirement Assistant</h1>")
    gr.HTML("<p id='subtitle'>Analyze requirements, generate code, and create unit tests effortlessly!</p>")

    with gr.Tabs():

        # ------------------- Tab 1: Requirement Analysis -------------------
        with gr.TabItem("Requirement Analysis"):
            with gr.Row():
                with gr.Column(scale=1):
                    with gr.Group(elem_classes="card"):
                        gr.Markdown("### Upload Requirement Document")
                        pdf_upload = gr.File(label="Upload PDF", file_types=[".pdf"])
                        prompt_input = gr.Textbox(label="Or enter requirements manually", lines=5, placeholder="Describe your software requirements here...")
                        analyze_btn = gr.Button("Analyze Requirements", variant="primary")
                with gr.Column(scale=2):
                    analysis_output = gr.Textbox(label="Requirements Analysis", lines=20, elem_classes="thick-box")

            analyze_btn.click(requirement_analysis, inputs=[pdf_upload, prompt_input], outputs=analysis_output)

        # ------------------- Tab 2: Code Generation -------------------
        with gr.TabItem("Code Generation"):
            with gr.Row():
                with gr.Column(scale=1):
                    with gr.Group(elem_classes="card"):
                        gr.Markdown("### Enter Code Requirements")
                        code_prompt = gr.Textbox(label="Requirements", lines=5, placeholder="Describe what code you want...")
                        language_dropdown = gr.Dropdown(choices=["Python", "JavaScript", "Java", "C++", "C#", "PHP", "Go", "Rust"], label="Programming Language", value="Python")
                        framework_dropdown = gr.Dropdown(choices=["None", "Flask", "Django", "React", "Node.js"], label="Framework", value="None")
                        style_dropdown = gr.Dropdown(choices=["OOP", "Functional", "Procedural"], label="Coding Style", value="OOP")
                        generate_btn = gr.Button("Generate Code", variant="primary")
                        test_btn = gr.Button("Generate Unit Tests", variant="secondary")
                with gr.Column(scale=2):
                    code_output = gr.Code(label="Generated Code", language="python", interactive=True, elem_classes="thick-box")
                    test_output = gr.Code(label="Generated Unit Tests", language="python", interactive=True, elem_classes="thick-box")

            generate_btn.click(code_generation, inputs=[code_prompt, language_dropdown, framework_dropdown, style_dropdown], outputs=code_output)
            test_btn.click(generate_tests, inputs=[code_output, language_dropdown], outputs=test_output)

app.launch(share=True)